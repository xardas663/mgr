// <auto-generated />
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20180610213347_null")]
    partial class @null
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Humidity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("HumiditySensorId");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.HasIndex("HumiditySensorId");

                    b.ToTable("Humidity");
                });

            modelBuilder.Entity("Core.HumiditySensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Desription");

                    b.Property<string>("DomoticzId");

                    b.Property<string>("Name");

                    b.Property<int?>("RoomId");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("HumiditySensors");
                });

            modelBuilder.Entity("Core.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<float>("ExpectedHumidity");

                    b.Property<float>("ExpectedTemperature");

                    b.Property<float>("MaxHumidity");

                    b.Property<float>("MaxTemperature");

                    b.Property<float>("MinHumidity");

                    b.Property<float>("MinTemperature");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Core.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Core.Temperature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("TemperatureSensorId");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("TemperatureSensorId");

                    b.ToTable("Temperatures");
                });

            modelBuilder.Entity("Core.TemperatureSensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Desription");

                    b.Property<string>("DomoticzId");

                    b.Property<string>("Name");

                    b.Property<int?>("RoomId");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("TemperatureSensors");
                });

            modelBuilder.Entity("Core.Humidity", b =>
                {
                    b.HasOne("Core.HumiditySensor", "HumiditySensor")
                        .WithMany("Humidity")
                        .HasForeignKey("HumiditySensorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.HumiditySensor", b =>
                {
                    b.HasOne("Core.Room", "Room")
                        .WithMany("HumiditySensors")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Core.Temperature", b =>
                {
                    b.HasOne("Core.TemperatureSensor", "TemperatureSensor")
                        .WithMany("Temperatures")
                        .HasForeignKey("TemperatureSensorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.TemperatureSensor", b =>
                {
                    b.HasOne("Core.Room", "Room")
                        .WithMany("TemperatureSensors")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
